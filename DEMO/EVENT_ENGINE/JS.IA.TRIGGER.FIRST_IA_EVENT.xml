<?xml version="1.0" encoding="UTF-8"?>
<jobs>
   <metadata>
      <row>
         <version>12.2.0</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>A</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <ert>1</ert>
         <platform>WINDOWS</platform>
         <last_runtimes>AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>JS.IA.TRIGGER.FIRST_IA_EVENT</name>
         <has_prompts>1</has_prompts>
         <type>JOBS</type>
         <has_object_variables>1</has_object_variables>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>CLIENT_QUEUE</queue>
         <description>Powershell cmdlet to send events to the event engine</description>
         <versioning_id>-655699310</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[!get client specific api key
:SET &KEY# = GET_VAR(VARA.STATIC_API_KEY, apikey_SAUAN03)
:P &KEY#
<#
.SYNOPSIS
    Can be used to send events to the Automic Event Engine
.DESCRIPTION
    Use this cmdlet to send events to the Automic Event Engine.
    It's making use of the Invoke-RestMethod commandlet and preconfigures everything.
    Creates the timestamp for the event automatically (current utc timestamp).
.PARAMETER Uri
    The Uri to the endpoint for the events
.PARAMETER Token
    The pre-shared key used for authentication with the Uri
.PARAMETER Type
    The type of the Event, must match the Event Definition in the AE
.PARAMETER Attributes
    The attributes of the event
.PARAMETER Timestamp
    The timestampe (Event time) of the event, if empty current time in utc is used, timestamp will be converted to utc.
.PARAMETER DisableKeepAlive
    Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. KeepAlive establishes a persistent connection to the server to facilitate subsequent requests.
.PARAMETER Proxy
    Specifies that the cmdlet uses a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy server.
.PARAMETER ProxyCredential
    Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.
    Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
    This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
.PARAMETER ProxyUseDefaultCredentials
    Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy parameter.
    This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
.EXAMPLE
    $data = @{
        Name="Tobi"
        Status="New"
        Count=3
    }
    C:\PS>send-event "http://path_to_ia/" "your-pre-shared-key" "IA.TEST" $data
    This will send the $data to the Event "IA.TEST" ($data is converted to json)

.NOTES
    Author: Tobias Stanzel, Kay Koll
#>
function Send-Event {
    [CmdletBinding()]
    param (
        [parameter(Mandatory=$true,Position=0)]
        [Uri]$Uri,

        [parameter(Mandatory=$true,Position=1)]
        [string]$Token,

        [parameter(Mandatory=$true,Position=2)]
        [alias("t")]
        [string]$Type,

        [parameter(Mandatory=$true,Position=3)]
        [alias("a")]
        [hashtable]$Attributes,

        [parameter(Mandatory=$false)]
        [DateTime]$Timestamp,

        #Invoke-RestMethod Options
        [parameter(Mandatory=$false)]
        [Int32]$TimeoutSec,

        [parameter(Mandatory=$false)]
        [switch]$DisableKeepAlive,

        [parameter(Mandatory=$false)]
        [Uri]$Proxy,

        [parameter(Mandatory=$false)]
        [PSCredential]$ProxyCredential,

        [parameter(Mandatory=$false)]
        [switch]$ProxyUseDefaultCredentials
    )
    PROCESS {
        if(!$Timestamp){
            $Timestamp = Get-Date;
        }
        $utcString = $Timestamp.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
        Write-Verbose "Event time set to: $utcString"

        $Body = @{
            type = $type
            timestamp = $utcString
            values = $attributes
        }
        $BodyString = ConvertTo-Json($Body)

        $headers = @{ "Content-Type"="application/json";Authorization=$Token}
        $params = @{
            Method = "Post"
            Headers = $headers
            Uri = $Uri
            Body = $BodyString
        }
        if($VerbosePreference) {
            $params.Verbose = $true
        }
        if($DebugPreference) {
            $params.Debug = $true
        }
        if($DisableKeepAlive) {
            $params.DisableKeepAlive = $true
        }
        if($TimeoutSec) {
            $params.TimeoutSec = $TimeoutSec
        }
        if($Proxy) {
            $params.Proxy = $Proxy
            if($ProxyCredential) {
                $params.ProxyCredential = $ProxyCredential
            }
            if($ProxyUseDefaultCredentials) {
                $params.ProxyUseDefaultCredentials = $true
            }
        }
        Write-Verbose "Headers: $(ConvertTo-Json($headers))"
        Write-Verbose "Body: $BodyString"
        try {
            Invoke-RestMethod @params
            Write-Host "Event $type send successfull"
        } catch {
            # Dig into the exception to get the Response details.
            # Note that value__ is not a typo.
            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__
            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
            Throw $_.Exception
        }
    }
}
echo "Sending hardcoded event now via powershell cmdlet to Event Engine now..."
$data = @{
  Name="&EVENT_DEFINITION#"
  Status="New"
  Count=3
}
send-event "http://&EVENT_ENGINE_HOST#:&EVENT_ENGINE_PORT#/analytics/api/v1/events" "&KEY#" "&EVENT_DEFINITION#" $data -v

]]></process>
      </row>
   </scripts>
   <job_attributes>
      <row>
         <activation_at_runtime>1</activation_at_runtime>
         <platform>WINDOWS</platform>
         <agent>WIN01</agent>
         <login>LOGIN.SAUAN03</login>
         <job_report_path>2</job_report_path>
         <win_work_dir>c:\</win_work_dir>
         <win_typ>2</win_typ>
         <win_view>0</win_view>
         <win_logon_as_batch>0</win_logon_as_batch>
         <win_show_at_desktop>0</win_show_at_desktop>
         <win_report_by_script>0</win_report_by_script>
         <job_object></job_object>
         <win_cmd></win_cmd>
      </row>
   </job_attributes>
   <object_variables>
      <row>
         <value>localhost</value>
         <name>&amp;EVENT_ENGINE_HOST#</name>
      </row>
      <row>
         <value>8090</value>
         <name>&amp;EVENT_ENGINE_PORT#</name>
      </row>
   </object_variables>
   <prompt_set_list>
      <row>
         <line_number>2</line_number>
         <prompt_set>PS.EVENT.EXECUTE.PRPT</prompt_set>
         <display_order>2</display_order>
      </row>
      <row>
         <line_number>1</line_number>
         <prompt_set>PRPT.IA.EVENT_NAME</prompt_set>
         <display_order>1</display_order>
      </row>
   </prompt_set_list>
   <prompt_set_defaults>
      <row>
         <alternative_view>1</alternative_view>
         <prompt_set_element_number>1</prompt_set_element_number>
         <prompt_set>PRPT.IA.EVENT_NAME</prompt_set>
         <value>VARA.IA.FIRST.EVENT.</value>
         <variable_name>EVENT_DEFINITION#</variable_name>
      </row>
      <row>
         <prompt_set_element_number>2</prompt_set_element_number>
         <prompt_set>PS.EVENT.EXECUTE.PRPT</prompt_set>
         <value>0</value>
         <variable_name>COUNT#</variable_name>
      </row>
      <row>
         <prompt_set_element_number>2</prompt_set_element_number>
         <prompt_set>PS.EVENT.EXECUTE.PRPT</prompt_set>
         <variable_name>MESSAGE#</variable_name>
      </row>
      <row>
         <prompt_set_element_number>2</prompt_set_element_number>
         <prompt_set>PS.EVENT.EXECUTE.PRPT</prompt_set>
         <variable_name>STATUS#</variable_name>
      </row>
   </prompt_set_defaults>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</jobs>
